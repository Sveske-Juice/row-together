//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Playing"",
            ""id"": ""942fba2c-d945-44c9-b6ce-b46a45fbd361"",
            ""actions"": [
                {
                    ""name"": ""NWPaddle"",
                    ""type"": ""Button"",
                    ""id"": ""9831c36e-7825-4fa5-83bb-3a04395df99d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NEPaddle"",
                    ""type"": ""Button"",
                    ""id"": ""94a7bcf7-be16-4bf9-bfde-5ef34b8182a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SEPaddle"",
                    ""type"": ""Button"",
                    ""id"": ""f98134e2-f666-4a59-ab95-8ccec33cfe51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SWPaddle"",
                    ""type"": ""Button"",
                    ""id"": ""a1254bef-17a9-4334-98f7-1b5c2e3de1bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2cb251e6-179e-43ce-bdce-14b4be256e8c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NWPaddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""783d3f9c-dcca-4a9d-8639-621665089452"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NEPaddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""937cab90-8389-4e3c-a1dc-0d4e8b07f2e9"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SEPaddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0750b5f-1345-431a-a395-64dd14828b68"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SWPaddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playing
        m_Playing = asset.FindActionMap("Playing", throwIfNotFound: true);
        m_Playing_NWPaddle = m_Playing.FindAction("NWPaddle", throwIfNotFound: true);
        m_Playing_NEPaddle = m_Playing.FindAction("NEPaddle", throwIfNotFound: true);
        m_Playing_SEPaddle = m_Playing.FindAction("SEPaddle", throwIfNotFound: true);
        m_Playing_SWPaddle = m_Playing.FindAction("SWPaddle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playing
    private readonly InputActionMap m_Playing;
    private List<IPlayingActions> m_PlayingActionsCallbackInterfaces = new List<IPlayingActions>();
    private readonly InputAction m_Playing_NWPaddle;
    private readonly InputAction m_Playing_NEPaddle;
    private readonly InputAction m_Playing_SEPaddle;
    private readonly InputAction m_Playing_SWPaddle;
    public struct PlayingActions
    {
        private @Controls m_Wrapper;
        public PlayingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NWPaddle => m_Wrapper.m_Playing_NWPaddle;
        public InputAction @NEPaddle => m_Wrapper.m_Playing_NEPaddle;
        public InputAction @SEPaddle => m_Wrapper.m_Playing_SEPaddle;
        public InputAction @SWPaddle => m_Wrapper.m_Playing_SWPaddle;
        public InputActionMap Get() { return m_Wrapper.m_Playing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Add(instance);
            @NWPaddle.started += instance.OnNWPaddle;
            @NWPaddle.performed += instance.OnNWPaddle;
            @NWPaddle.canceled += instance.OnNWPaddle;
            @NEPaddle.started += instance.OnNEPaddle;
            @NEPaddle.performed += instance.OnNEPaddle;
            @NEPaddle.canceled += instance.OnNEPaddle;
            @SEPaddle.started += instance.OnSEPaddle;
            @SEPaddle.performed += instance.OnSEPaddle;
            @SEPaddle.canceled += instance.OnSEPaddle;
            @SWPaddle.started += instance.OnSWPaddle;
            @SWPaddle.performed += instance.OnSWPaddle;
            @SWPaddle.canceled += instance.OnSWPaddle;
        }

        private void UnregisterCallbacks(IPlayingActions instance)
        {
            @NWPaddle.started -= instance.OnNWPaddle;
            @NWPaddle.performed -= instance.OnNWPaddle;
            @NWPaddle.canceled -= instance.OnNWPaddle;
            @NEPaddle.started -= instance.OnNEPaddle;
            @NEPaddle.performed -= instance.OnNEPaddle;
            @NEPaddle.canceled -= instance.OnNEPaddle;
            @SEPaddle.started -= instance.OnSEPaddle;
            @SEPaddle.performed -= instance.OnSEPaddle;
            @SEPaddle.canceled -= instance.OnSEPaddle;
            @SWPaddle.started -= instance.OnSWPaddle;
            @SWPaddle.performed -= instance.OnSWPaddle;
            @SWPaddle.canceled -= instance.OnSWPaddle;
        }

        public void RemoveCallbacks(IPlayingActions instance)
        {
            if (m_Wrapper.m_PlayingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayingActions @Playing => new PlayingActions(this);
    public interface IPlayingActions
    {
        void OnNWPaddle(InputAction.CallbackContext context);
        void OnNEPaddle(InputAction.CallbackContext context);
        void OnSEPaddle(InputAction.CallbackContext context);
        void OnSWPaddle(InputAction.CallbackContext context);
    }
}
